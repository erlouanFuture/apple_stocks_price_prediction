# -*- coding: utf-8 -*-
"""apple_stocks_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BV3BXbDPgsENGjWn94dPM3g1xgqXm5Kt

#Data treatment
"""

import yfinance as yf

# Get stock data for Apple (AAPL)
aapl_data = yf.download('AAPL', start='2022-01-01', end='2025-07-28') # change the date !!!!!!!!!!!!!!!!!

# Print the first few rows of the data
print(aapl_data.head())

# Display the first few rows of the data
display(aapl_data.head())

aapl_data['Close']['AAPL'][0]

open_close = aapl_data['Close']['AAPL'] / aapl_data['Open']['AAPL']
chng = (1 - open_close) * 100

high_low = aapl_data['High']['AAPL'] / aapl_data['Low']['AAPL']
chng_high_low = (1 - high_low) * 100

chng_high_low

chng

import numpy as np
import tensorflow as tf
import keras

# Suggestion : en prenant en compte les 3 derniers moi en pourrai calculer le résultats du prochain jour



xs = np.array([])
ys = np.array([])
for i in range((len(chng)-90)*90*2):
  xs = np.append(xs,0)
for i in range((len(chng)-90)*2):
  ys = np.append(ys,0)

len(chng) == len(chng_high_low)

len(chng), len(chng_high_low)

xs = np.reshape(xs,(893-90,90,2))
ys = np.reshape(ys,(893-90,2))

xs.shape,ys.shape

if len(chng) == len(chng_high_low):
  for i in range(90,len(chng)-1): # 30 jours * 3 = 90
    for j in range(90):
      for k in range(2):
        # xs
        if k == 0:
          xs[i-90][j][k] = chng[i-90:i][j]
        if k == 1:
          xs[i-90][j][k] = chng_high_low[i-90:i][j]

    for k in range(2):
        # ys
      if k == 0:
        ys[i-90][k] = chng[i+1]
      if k == 1:
        ys[i-90][k] = chng_high_low[i+1]

"""

if len(chng) == len(chng_high_low):
  for i in range(90,len(chng)-1): # 30 jours * 3 = 90
    for j in range(90):
      for k in range(2):
        # xs
        if k == 0:
          xs[i-90][j][k] = chng[i-90:i][j]
        if k == 1:
          xs[i-90][j][k] = chng_high_low[i-90:i][j]

    for k in range(2):
        # ys
      if k == 0:
        ys[i-90][k] = chng[i+1]
      if k == 1:
        ys[i-90][k] = chng_high_low[i+1]






"""

xs.shape, ys.shape

len(xs),len(ys)

len(xs) == len(ys)





"""# Model"""

model = keras.Sequential([
    keras.layers.LSTM(300, return_sequences=True, input_shape=(xs.shape[1], xs.shape[2])),
    keras.layers.Dropout(0.2),
    keras.layers.LSTM(50),
    keras.layers.Dropout(0.2),
    keras.layers.Dense(ys.shape[1])
])

model.compile(optimizer='adam', loss='mae', metrics=['accuracy'])
model.summary()

ys.shape, xs.shape

model.fit(xs,ys,validation_split=0.2,epochs=2)

x_pred = np.array([xs[5]])
x_pred.shape

model.predict(x_pred)

ys[5] # donc l'erreur de plus-ou-moins 1%, est valide

# je vérifie l'accuracy du champs de plus-ou-moins 1%
accuracy_pourcent = 0
for i in range(800):
  x_pred = np.array([xs[i]])
  y_pred = model.predict(x_pred)
  y_pred = y_pred[0]
  y_true = ys[i]
  if abs(y_pred[0] - y_true[0]) < 1 and abs(y_pred[1] - y_true[1]) <= 1:
    #print(f"y_pred: {y_pred}, y_true: {y_true}")
    accuracy_pourcent += 1
print(f"accuracy: {accuracy_pourcent/500}")

"""sur les 100 premiers :

43% plus-ou-moins 1% /////
63% plus-ou-moins 1.5% /////

sur 500 samples :

85% plus-ou-moins 2%

Sur 800 samples:
92.8% plus-ou-moins 1%

# Model prediction for today
"""

xs.shape

xs[5].shape

# Data of today
open = 214.16
close = 212
high = 214.6
low = 211.6

open_close_pred = close / open
chng_pred = (1 - open_close_pred) * 100

high_low_pred = high / low
chng_high_low_pred = (1 - high_low_pred) * 100

chng_pred, chng_high_low_pred

chng, chng_high_low

xs[-1][89][0] = int(chng_pred)
xs[-1][89][1] = chng_high_low_pred

x_pred = np.array([xs[-1]])
y_pred = model.predict(x_pred)
y_pred = y_pred[0]
print("chng of today :",y_pred[0], "% plus-ou-moins 1% / chng_high_low of today: ",y_pred[1],"% plus-ou-moins 1%")

print("Donc le champs d'évolution d'aujourd'hui est de ",y_pred[0]-1,"% à ",y_pred[1]+1, "%")

if chng_high_low_pred < 0:
  print("high est plus haut que low : tout va bien")

print("La volatilité d'aujourd'hui (les points très haut, très bas) est plus-ou-moins de +/-", abs(chng_high_low_pred) - 1,"% à +/-", abs(chng_high_low_pred) + 1, "%")